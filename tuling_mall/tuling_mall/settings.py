"""
Django settings for tuling_mall project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for productioncd
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret keys used in production secret!
SECRET_KEY = 'um7@!cz)+j#vkak+umn$+qmvhti@^t218c_jix5g$9mm3bwi3&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
"""
DEBUG = True 测试环境
DEBUG = False 生产环境
"""

# 允许任何IP访问
ALLOWED_HOSTS = ['*']


# Application definition
# 前端和后端运行端口不一致导致跨域请求失败
# django-cors-headers
# 坑:如果搭建现在的django框架版本是2.x版本，不能安装最新的
# pip install django-cors-headers==3
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig',
    'verifications.apps.VerificationsConfig',
    'areas.apps.AreasConfig',
    'goods.apps.GoodsConfig',
    'contents.apps.ContentsConfig',
    'carts.apps.CartsConfig',
    'orders.apps.OrdersConfig',
    'pay.apps.PayConfig',
    'corsheaders', # 1.注册django-cors-headers
    'haystack',
    'django_crontab',
]


MIDDLEWARE = [
    # 2.cors安装注册完成之后需要进行中间件注册，并且注册位置需要在顶层
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 3.当cors注册完成之后需要设置跨域白名单
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1:8080',
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    'http://localhost:8080',
    'http://172.26.200.150:8080',
    'http://172.26.200.150:8000',
)

# 4.允许跨域时携带cookies
CORS_ALLOW_CREDENTIALS = True


ROOT_URLCONF = 'tuling_mall.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tuling_mall.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        # sqlite3是Django默认的文件型数据库，我们不用，因为性能太差
        # 我们直接将 sqlite3 更改为 mysql
        # 'ENGINE': 'django.db.backends.sqlite3',
        'ENGINE': 'django.db.backends.mysql',
        # 原先的 NAME 也要更改，改为我们之前创建的数据库名 tuling_mall
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'NAME': 'tuling_mall',
        'USER': 'root', # 当前数据库的用户
        'PASSWORD': '', # 数据库密码
        # 'HOST': '', # host的value写'',代表127.0.0.1本地
        'HOST': '172.26.200.150',
        'PORT': 3306
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'




# redis 配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        # "LOCATION": "redis://127.0.0.1:6379/0",
        "LOCATION": "redis://172.26.200.150:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        # "LOCATION": "redis://127.0.0.1:6379/1",
        "LOCATION": "redis://172.26.200.150:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "code": {  # 验证码
        "BACKEND": "django_redis.cache.RedisCache",
        # "LOCATION": "redis://127.0.0.1:6379/2",
        "LOCATION": "redis://172.26.200.150:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "history": {  # 浏览记录
        "BACKEND": "django_redis.cache.RedisCache",
        # "LOCATION": "redis://127.0.0.1:6379/3",
        "LOCATION": "redis://172.26.200.150:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "carts": {  # 购物车
        "BACKEND": "django_redis.cache.RedisCache",
        # "LOCATION": "redis://127.0.0.1:6379/4",
        "LOCATION": "redis://172.26.200.150:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
"""
将 django-redis 作为 session 储存后端不用安装任何额外的 backend
用户注册、登录功能都会使用到session、cookie
因为session默认存储在mysql，如果想要将session存储在redis中，就要作如下配置：
session存储在redis的1号库
"""
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"



# log
# 日志一定是在测试环境(DEBUG = TRUE)中才能被输出
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/tuling.logs'),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}


# 覆盖内置模型类
AUTH_USER_MODEL = 'users.User'


# 邮件服务器设置
# 邮件发送设置 qq邮箱为发送邮件的服务器
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = ''
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = ''
# 收件人看到的发件人
EMAIL_FROM = '图灵商城<tuling_python@163.com>'




# 4. 在settings.py中进行配置
# FastDFS的存储类配置
DEFAULT_FILE_STORAGE = 'utils.FastDFS.storage.MyStorage'



# ES配置项
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch2_backend.Elasticsearch2SearchEngine',
        'URL': 'http://172.26.200.150:9200/', # Elasticsearch服务器ip地址，端口号固定为9200
        'INDEX_NAME': 'tuling_mall', # Elasticsearch建立的索引库的名称
    },
}

# 全局搜索功能分页 分页配置项
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5  # 一页只返回5条数据



# 定时任务配置
CRONJOBS = [
    # 每1分钟生成一次首页静态文件，并写入日志 ..../logs/crontab.log中
    ('*/1 * * * *', 'contents.crons.generate_static_index_html', '>> ' + os.path.join(BASE_DIR, 'logs/crontab.log'))
]
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'


# 设置公钥与私钥读取路径以及支付宝支付信息
# 支付宝支付配置
ALIPAY_APPID = '请填写沙箱环境中的APPID'  # 更换成自己的沙箱应用中的APPID
ALIPAY_DEBUG = True

# 沙箱环境支付接口
# ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do'  # 以前的，弃用
ALIPAY_URL = 'https://openapi-sandbox.dl.alipaydev.com/gateway.do' # 现在的

# 支付成功的回调页面
# ALIPAY_RETURN_URL = 'http://127.0.0.1:8080/pay_success.html'
ALIPAY_RETURN_URL = 'http://172.26.200.150:8080/pay_success.html'

# 应用私钥路径
APP_PRIVATE_KEY_PATH = os.path.join(BASE_DIR, 'apps/pay/keys/app_private_key.pem')

# 支付宝公钥路径
ALIPAY_PUBLIC_KEY_PATH = os.path.join(BASE_DIR, 'apps/pay/keys/alipay_public_key.pem')